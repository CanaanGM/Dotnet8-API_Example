<?xml version="1.0"?>
<doc>
    <assembly>
        <name>API</name>
    </assembly>
    <members>
        <member name="M:API.Controllers.Auth.AccountController.ValidateModelState">
            <summary>
            checks if the information provided to the guard is true
            </summary>
            <exception cref="T:System.ArgumentException">throws the papers in the face of the citizen if the info is false!</exception>
        </member>
        <member name="M:API.Controllers.Auth.AccountController.RegisterAsync(Core.DTO.Authentication.RegisterRequest)">
            <summary>
            Creates a new citizen in our city, providing them with an id and a token needed to refresh the id
            </summary>
            <param name="RegisterRequest">user information</param>
            <returns>User with token and refresh token. <see cref="T:Core.DTO.Authentication.AuthenticationResponse"/></returns>
        </member>
        <member name="M:API.Controllers.Auth.AccountController.Login(Core.DTO.Authentication.LoginRequest)">
            <summary>
            Sings a song of a user attempting to enter the system.
            it allows them in, signs their papers and gives them an token to refresh said id
            </summary>
            <param name="loginRequest">user email and password <see cref="T:Core.DTO.Authentication.LoginRequest"/></param>
            <returns>User with token and refresh token. <see cref="T:Core.DTO.Authentication.AuthenticationResponse"/></returns>
        </member>
        <member name="M:API.Controllers.Auth.AccountController.Logout">
            <summary>
            invalidates the user Token and claims, making them unauthenticated for future requests
            </summary>
            <returns>204</returns>
        </member>
        <member name="M:API.Controllers.Auth.AccountController.IsEmailAvailable(System.String)">
            <summary>
            for use from the user register DTO, it checks if the email is taken or not.
            `Ok()` cause the request was correct and successful
            </summary>
            <param name="email">a string in the shape of email: jane@doe.come</param>
            <returns>true if the email is not already registered, otherwise false.</returns>
        </member>
        <member name="M:API.Controllers.Auth.AccountController.GenerateNewAccessToken(Core.DTO.Authentication.RefreshTokenRequest)">
            <summary>
            Refresh the token as per the client request, remember, the client is the FrontEnd software not the user.
            </summary>
            <param name="request"> a refresh token request <see cref="T:Core.DTO.Authentication.RefreshTokenRequest"/> </param>
            <returns>newly issued jwt w/ refresh token <see cref="T:Core.DTO.Authentication.AuthenticationResponse"/> </returns>
        </member>
        <member name="M:API.Controllers.Auth.AccountController.TestProblemDetails(System.Threading.CancellationToken)">
            <summary>
            Throws an exception to test the Custom Problem details
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:API.Controllers.v1.ToDosController.Get(System.Threading.CancellationToken)">
            <summary>
            Gets all the ToDos in the database, irrespective of the user or status
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
    </members>
</doc>
